cmake_minimum_required(VERSION 3.3)
project(framebuffer)
#find_package(JNI)
if (NOT JNI_LIBRARIES)
#   set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/cmake)
   #LIST(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_PREFIX}/cmake")
   #list(INSERT CMAKE_MODULE_PATH 0 ${CMAKE_CURRENT_SOURCE_DIR}/cmake)
   #MESSAGE(STATUS  ${CMAKE_MODULE_PATH})
   #MESSAGE(FATAL_ERROR  "Edit and copy framebuffer/cmake/FindJNI.cmake to for eg /opt/android-sdk/cmake/3.6.3155560/share/cmake-3.6/Modules. The current file in the directoryis fixed for ArchLinux - Search for JAVA_APPEND_LIBRARY_DIRECTORIES(JAVA_AWT_LIBRARY_DIRECTORIES and add required paths")
   SET(JNI_LIBRARIES, "/usr/lib64/jvm/java-8-jdk/lib/amd64/")
   SET(JNI_INCLUDE_DIRS "/usr/lib/jvm/java-8-jdk/include/:/usr/include")
   SET(JAVA_AWT_LIBRARY, "/usr/lib64/jvm/java-8-jdk/lib/amd64/libjawt.so")
   SET(JAVA_JVM_LIBRARY, "/usr/lib64/jvm/java-8-jdk/jre/lib/amd64/server/libjvm.so")
endif (NOT JNI_LIBRARIES)
message(STATUS "Using JNI libraries: ${JNI_LIBRARIES}" )
message(STATUS "Using JNI include: ${JNI_INCLUDE_DIRS}" )
message(STATUS "Using AWT Libraries: ${JAVA_AWT_LIBRARY}" )
message(STATUS "Using JVM Libraries: ${JAVA_JVM_LIBRARY}" )

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
set(SOURCE_FILES framebuffer.cc  snappy.cc  snappy-sinksource.cc  snappy-stubs-internal.cc)
include_directories("${JNI_INCLUDE_DIRS}" ${PROJECT_SOURCE_DIR})
ADD_LIBRARY(framebuffer SHARED ${SOURCE_FILES})
TARGET_LINK_LIBRARIES(framebuffer ${JNI_LIBRARIES})
